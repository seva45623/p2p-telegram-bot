import asyncio
import aiohttp
from telegram import Bot, Update
from telegram.ext import ApplicationBuilder, CommandHandler, ContextTypes

# –¢–æ–∫–µ–Ω Telegram-–±–æ—Ç–∞
TOKEN = '7728031836:AAHHTy5F_teDHnkvLG6xXQvA4ITMn3QCQOw'

user_chat_id = -4614762358  # –ø–æ–ª—É—á–∏–º –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /start

ALLOWED_BANKS = ["Monobank", "PrivatBank", "PUMB"]
SPREAD_THRESHOLD = 2.6  # 1%
CHECK_INTERVAL = 5  # —Å–µ–∫—É–Ω–¥

async def get_binance_prices():
    url = 'https://p2p.binance.com/bapi/c2c/v2/friendly/c2c/adv/search'
    headers = {'Content-Type': 'application/json'}

    async with aiohttp.ClientSession() as session:
        async def get_price(trade_type):
            payload = {
                "asset": "USDT",
                "fiat": "UAH",
                "tradeType": trade_type,
                "page": 1,
                "rows": 10,
                "payTypes": ALLOWED_BANKS
            }
            async with session.post(url, json=payload, headers=headers) as r:
                data = await r.json()
                advs = data.get("data", [])
                for adv in advs:
                    return float(adv["adv"]["price"])
            return None

        buy = await get_price("BUY")
        sell = await get_price("SELL")
        return {"buy": buy, "sell": sell}


from aiohttp import ClientTimeout

from aiohttp import ClientTimeout

async def get_bybit_prices():
    url = 'https://api2.bybit.com/fiat/otc/item/online'
    headers = {
        "User-Agent": "Mozilla/5.0",
        "Accept": "application/json, text/plain, */*",
        "Referer": "https://www.bybit.com/",
        "Origin": "https://www.bybit.com",
        "Connection": "keep-alive",
    }

    timeout = ClientTimeout(total=10)
    async with aiohttp.ClientSession(headers=headers, timeout=timeout) as session:
        results = {}
        for side in ['BUY', 'SELL']:
            payload = {
                "userId": "",
                "tokenId": "USDT",
                "currencyId": "UAH",
                "payment": [],  # –º–æ–∂–Ω–æ –ø–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å ALLOWED_BANKS –ø–æ—Å–ª–µ –æ—Ç–ª–∞–¥–∫–∏
                "side": side,
                "size": 10,
                "page": 1
            }

            try:
                async with session.post(url, json=payload) as response:
                    if response.status != 200:
                        print(f"‚ùå Bybit API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status}")
                        continue
                    data = await response.json()
                    items = data.get('result', {}).get('items', [])
                    print(f"\nüîÑ Bybit {side}: –ø–æ–ª—É—á–µ–Ω–æ {len(items)} –æ—Ñ—Ñ–µ—Ä–æ–≤")

                    for item in items:
                        payments = item.get('payments', [])
                        print(f"üì¶ –ü–ª–∞—Ç—ë–∂–∫–∏ –æ—Ñ—Ñ–µ—Ä–∞: {payments}")

                        # üîß –≤—Ä–µ–º–µ–Ω–Ω–æ –ø—Ä–∏–Ω–∏–º–∞–µ–º –ø–µ—Ä–≤—ã–π –æ—Ñ—Ñ–µ—Ä –±–µ–∑ —Ñ–∏–ª—å—Ç—Ä–∞ –ø–æ –±–∞–Ω–∫–∞–º:
                        price = float(item['price'])
                        results['buy' if side == 'BUY' else 'sell'] = price
                        print(f"üí∞ Bybit {side} —Ü–µ–Ω–∞: {price}")
                        break  # –±–µ—Ä—ë–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–π –ø–æ–¥—Ö–æ–¥—è—â–∏–π –æ—Ñ—Ñ–µ—Ä

            except asyncio.TimeoutError:
                print(f"‚è± –¢–∞–π–º–∞—É—Ç –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Bybit ({side})")
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è Bybit {side}:", e)

        return results


async def check_arbitrage(bot: Bot):
    global user_chat_id
    while True:
        try:
            binance = await get_binance_prices()
            bybit = await get_bybit_prices()

            print("\nüìä –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω:")
            print(f"üîπ Binance: –ö—É–ø–∏—Ç—å: {binance.get('buy')} | –ü—Ä–æ–¥–∞—Ç—å: {binance.get('sell')}")
            print(f"üî∏ Bybit:   –ö—É–ø–∏—Ç—å: {bybit.get('buy')} | –ü—Ä–æ–¥–∞—Ç—å: {bybit.get('sell')}")

            for name, prices in [("Binance", binance), ("Bybit", bybit)]:
                buy = prices.get("buy")
                sell = prices.get("sell")

                if buy is None or sell is None:
                    print(f"‚ö†Ô∏è –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –æ—Ç {name} –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Å–ø—Ä–µ–¥–∞.")
                    continue

                spread = ((sell - buy) / buy) * 100
                print(f"üìà {name} –°–ø—Ä–µ–¥: {spread:.2f}%")

                if spread >= SPREAD_THRESHOLD:
                    message = (
                        f"üìç {name} P2P\n"
                        f"üîª –ö—É–ø–∏—Ç—å USDT: {buy:.2f} –≥—Ä–Ω\n"
                        f"üî∫ –ü—Ä–æ–¥–∞—Ç—å USDT: {sell:.2f} –≥—Ä–Ω\n"
                        f"üìà –°–ø—Ä–µ–¥: {spread:.2f}%"
                    )
                    print(f"üì¨ –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Telegram (—Å–ø—Ä–µ–¥ {spread:.2f}%)")

                    if user_chat_id:
                        await bot.send_message(chat_id=user_chat_id, text=message)
                    else:
                        print("‚ö†Ô∏è chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ.")
                else:
                    print(f"üìâ –°–ø—Ä–µ–¥ {spread:.2f}% < {SPREAD_THRESHOLD}%, —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è.")

        except Exception as e:
            print("‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞ –≤ check_arbitrage:", e)

        await asyncio.sleep(CHECK_INTERVAL)



async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global user_chat_id
    user_chat_id = update.effective_chat.id
    await update.message.reply_text(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –í–∞—à chat_id: {user_chat_id}")


def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))

    # –∑–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞
    bot = Bot(token=TOKEN)
    app.job_queue.run_once(lambda ctx: asyncio.create_task(check_arbitrage(bot)), when=1)

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    app.run_polling()

if __name__ == "__main__":
    main()
